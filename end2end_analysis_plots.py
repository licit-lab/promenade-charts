'''
Created on 29 lug 2021

@author: lorenzo
'''
import pandas
import matplotlib.pyplot as pyplt
import numpy as np

if __name__ == '__main__':
    #In the following instruction replace <file> with the name of the file generated by the script "time_analysis2_par2.py"
    df = pandas.read_csv("<file>.csv", delimiter=";")
    
    t_snaps = []
    with open("t_snaps.txt") as f:
        for line in f.readlines():
            t_snaps.append(line.strip())
    
    param = 12
    labels = []
    for i in range(0, param):
        labels.append("")
    labels.append(t_snaps[0])
    for i in range(param+1, len(t_snaps)-param):
        labels.append("")
    labels.append(t_snaps[-1])
    for i in range(len(t_snaps)-(param-1), len(t_snaps)):
        labels.append("")
    
    '''***End-to-end latency***'''
    '''
    fig = pyplt.figure(1, (10,6))
    pyplt.plot(t_snaps, df["e2e_min"]/60000, color='g', marker='o', markersize=3, linestyle='None', alpha=0.4, label="min")
    pyplt.plot(t_snaps, df["e2e_avg"]/60000, color='b', marker='o', markersize=3, linestyle='None', label="avg")
    pyplt.plot(t_snaps, df["e2e_max"]/60000, color='r', marker='o', markersize=3, linestyle='None', alpha=0.4, label="max")
    pyplt.grid(True, alpha=0.75, linestyle='--')
    pyplt.xticks(ticks=[x for x in range(0,len(labels))], labels=labels, rotation='horizontal')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("End-to-End Latency", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\end_to_end_latency_prova.png")
    #pyplt.show()
    '''
    '''***Breakdown analysis***'''
    '''
    pos = np.arange(len(t_snaps))
    # Heights of bars1 + bars2
    bars = np.add(df["ing_avg"]/60000, df["proc_avg"]/60000).tolist()

    fig = pyplt.figure(2, (25,10))
    pyplt.bar(pos, df["ing_avg"]/60000, edgecolor='white', width=1, label="ingestion")
    pyplt.bar(pos, df["proc_avg"]/60000, bottom=df["ing_avg"]/60000, edgecolor='white', width=1, label="processing")
    pyplt.bar(pos, df["update_avg"]/60000, bottom=bars, edgecolor='white', width=1, label="update")
    pyplt.xticks(pos, t_snaps, rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("End-to-End Latency - Breakdown Analysis", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\breakdown_analysis_abs.pdf")
    #pyplt.show()
    '''
    '''***Breakdown analysis (with wait time)***'''
    '''
    pos = np.arange(len(t_snaps))
    
    wait_time = [15]*len(t_snaps)
    proc_time = np.subtract(df["proc_avg"]/60000, wait_time).tolist()
    
    # Heights of bars1 + bars2
    first_second_bars = np.add(df["ing_avg"]/60000, wait_time).tolist()
    # Heights of bars1 + bars2+ bars3
    first_second_third_bars = np.add(first_second_bars, proc_time).tolist()

    fig = pyplt.figure(3, (25,10))
    pyplt.bar(pos, df["ing_avg"]/60000, edgecolor='white', width=1, label="ingestion")
    pyplt.bar(pos, wait_time, bottom=df["ing_avg"]/60000, edgecolor='white', width=1, label="wait")
    pyplt.bar(pos, proc_time, bottom=first_second_bars, edgecolor='white', width=1, label="processing")
    pyplt.bar(pos, df["update_avg"]/60000, bottom=first_second_third_bars, edgecolor='white', width=1, label="update")
    pyplt.xticks(pos, t_snaps, rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("End-to-End Latency - Breakdown Analysis", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\breakdown_analysis_abs_wait_time.pdf")
    #pyplt.show()
    '''
    '''***Breakdown analysis (relative)***'''
    '''
    pos = np.arange(len(t_snaps))

    # From raw value to percentage
    totals = [i+j+k for i,j,k in zip(df['ing_avg'], df['proc_avg'], df['update_avg'])]
    ing_time = [i / j * 100 for i,j in zip(df['ing_avg'], totals)]
    proc_time = [i / j * 100 for i,j in zip(df['proc_avg'], totals)]
    update_time = [i / j * 100 for i,j in zip(df['update_avg'], totals)]
    
    # Heights of bars1 + bars2
    bars = np.add(ing_time, proc_time).tolist()
    
    fig = pyplt.figure(4, (25,10))
    pyplt.bar(pos, ing_time, edgecolor='white', width=1, label="ingestion")
    pyplt.bar(pos, proc_time, bottom=ing_time, edgecolor='white', width=1, label="processing")
    pyplt.bar(pos, update_time, bottom=bars, edgecolor='white', width=1, label="update")
    pyplt.xticks(pos, t_snaps, rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Percentage [%]", fontsize=12)
    pyplt.title("End-to-End Latency - Breakdown Analysis", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\breakdown_analysis_rel.pdf")
    #pyplt.show()
    '''
    '''***Breakdown analysis (relative, with wait time)***'''
    '''
    pos = np.arange(len(t_snaps))
    
    wait_time = [900000]*len(t_snaps)
    proc_time = np.subtract(df["proc_avg"], wait_time).tolist()


    # From raw value to percentage
    totals = [i+j+k+l for i,j,k,l in zip(df['ing_avg'], wait_time, proc_time, df['update_avg'])]
    ing_time = [i / j * 100 for i,j in zip(df['ing_avg'], totals)]
    wait_time = [i / j * 100 for i,j in zip(wait_time, totals)]
    proc_time = [i / j * 100 for i,j in zip(proc_time, totals)]
    update_time = [i / j * 100 for i,j in zip(df['update_avg'], totals)]
    
    # Heights of bars1 + bars2
    first_second_bars = np.add(ing_time, wait_time).tolist()
    # Heights of bars1 + bars2 + bars3
    first_second_third_bars = np.add(first_second_bars, proc_time).tolist()
    
    fig = pyplt.figure(5, (25,10))
    pyplt.bar(pos, ing_time, edgecolor='white', width=1, label="ingestion")
    pyplt.bar(pos, wait_time, bottom=ing_time, edgecolor='white', width=1, label="wait")
    pyplt.bar(pos, proc_time, bottom=first_second_bars, edgecolor='white', width=1, label="processing")
    pyplt.bar(pos, update_time, bottom=first_second_third_bars, edgecolor='white', width=1, label="update")
    pyplt.xticks(pos, t_snaps, rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Percentage [%]", fontsize=12)
    pyplt.title("End-to-End Latency - Breakdown Analysis", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\breakdown_analysis_rel_wait_time.pdf")
    #pyplt.show()
    '''
    '''***End-to-end latency***'''
    fig = pyplt.figure(1, (7,5))
    
    e2e_min_l = list(df["e2e_min"]/60000)
    #e2e_min = min(e2e_min_l)
    e2e_max_l = list(df["e2e_max"]/60000)
    e2e_max = max(e2e_max_l)
    e2e_min = min(e2e_max_l)
    
    min_l = [e2e_min]*len(t_snaps)
    #mean_l = [sum(df["e2e_avg"]/60000)/len(df["e2e_avg"])]*len(t_snaps)
    mean_l = [sum(df["e2e_max"]/60000)/len(df["e2e_max"])]*len(t_snaps)
    max_l = [e2e_max]*len(t_snaps)
    
    pyplt.plot(t_snaps, min_l, color='g', linestyle='--', alpha=0.4, label="min")
    pyplt.plot(t_snaps, df["e2e_max"]/60000, color='b', marker='o', markersize=3, linestyle='None', label=r'$F$')
    pyplt.plot(t_snaps, mean_l, color='k', linestyle='--', alpha=0.4, label="avg")
    pyplt.plot(t_snaps, max_l, color='r', linestyle='--', alpha=0.4, label="max")
    pyplt.grid(True, alpha=0.75, linestyle='--')
    pyplt.xticks(ticks=[x for x in range(0,len(labels))], labels=labels, rotation='horizontal')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=12)
    pyplt.xlabel("15-minutes Time Interval", fontsize=14)
    pyplt.ylabel("Latency [min]", fontsize=14)
    pyplt.title("End-to-End Latency", fontsize=16)
    pyplt.legend(fontsize=14, loc="lower left")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("end_to_end_latency.pdf")
    #pyplt.show()
    
    '''***End-to-end latency - Processing time***'''
    '''
    fig = pyplt.figure(7, (25,10))
    pyplt.plot(t_snaps, df["proc_min"]/60000, color='g', marker='o', linestyle='--', alpha=0.4, label="min")
    pyplt.plot(t_snaps, df["proc_avg"]/60000, color='b', marker='o', linestyle='-', label="avg")
    pyplt.plot(t_snaps, df["proc_max"]/60000, color='r', marker='o', linestyle='--', alpha=0.4, label="max")
    pyplt.grid(True, alpha=0.75, linestyle='--')
    pyplt.xticks(rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("Processing Latency", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\processing_latency_prova.pdf")
    '''
    '''***End-to-end latency - Update time***'''
    '''
    fig = pyplt.figure(8, (25,10))
    pyplt.plot(t_snaps, df["update_min"]/60000, color='g', marker='o', linestyle='--', alpha=0.4, label="min")
    pyplt.plot(t_snaps, df["update_avg"]/60000, color='b', marker='o', linestyle='-', label="avg")
    pyplt.plot(t_snaps, df["update_max"]/60000, color='r', marker='o', linestyle='--', alpha=0.4, label="max")
    pyplt.grid(True, alpha=0.75, linestyle='--')
    pyplt.xticks(rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("Update Latency", fontsize=14)
    pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\update_latency_per_doc_prova.pdf")
    
    df_update = pandas.read_csv("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\update_times.csv", delimiter=";")
    fig = pyplt.figure(9, (25,10))
    pyplt.plot(t_snaps, df_update["update_time"]/60000, color='b', marker='o', linestyle='--')
    pyplt.grid(True, alpha=0.75, linestyle='--')
    pyplt.xticks(rotation='vertical')
    #plt.tick_params(labelbottom=False)
    pyplt.tick_params(axis='x', labelsize=10)
    pyplt.xlabel("15-minutes Time Interval", fontsize=12)
    pyplt.ylabel("Latency [min]", fontsize=12)
    pyplt.title("Update Latency", fontsize=14)
    #pyplt.legend(fontsize=12, loc="upper right")
    pyplt.margins(x=0.01)
    fig.tight_layout()
    pyplt.savefig("C:\\Users\\lorenzo\\eclipse-workspace\\promenade\\update_latency_prova.pdf")
    '''